import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters.text import Text
from aiogram.types import ReplyKeyboardRemove
import ticket_bot_pb2
import factory
import grpc_calls
import grpc
from background_tasks import check_available
from settings import BOT_TOKEN


logging.basicConfig(level=logging.INFO)
dp = Dispatcher()
bot = Bot(token=BOT_TOKEN)


class MenuState(StatesGroup):
    menu = State()
    ticket_open_client = State()
    ticket_open_agent = State()


@dp.message(commands=["start"])
async def cmd_start(message: types.Message, state: FSMContext):
    status: ticket_bot_pb2.SupportStatus = grpc_calls.get_status(
        user_id=message.from_user.id)

    if status.userState == ticket_bot_pb2.USER:
        if status.supportState == ticket_bot_pb2.IDLE:
            await state.set_state(MenuState.menu)
            keyboard = factory.create_menu_keyboard()
            await message.answer(
                '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß—Ç–æ–±—ã –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ' +
                '–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É',
                reply_markup=keyboard
            )
        elif status.supportState == ticket_bot_pb2.TICKET_PENDING_ANSWER:
            await state.set_state(MenuState.ticket_open_client)
            ticketId = status.ticketData.ticketId
            await message.answer(
                f'–í–∞—Å —Å–≤—è–∑–∞–ª–∏ —Å –±–ª–æ–≥–µ—Ä–æ–º.'
            )
        elif status.supportState == ticket_bot_pb2.TICKET_OPEN:
            await state.set_state(MenuState.ticket_open_client)
            ticketId = status.ticketData.ticketId
            await message.answer(
                f'–í–∞—Å —Å–≤—è–∑–∞–ª–∏ —Å –±–ª–æ–≥–µ—Ä–æ–º.'
            )
        else:
            raise ValueError()

    elif status.userState == ticket_bot_pb2.AGENT:
        if status.HasField('ticketData'):
            await state.set_state(MenuState.ticket_open_agent)
            ticketId = status.ticketData.ticketId
            await message.answer(
                f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∞–≥–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏, ' +
                f'—Å–µ–π—á–∞—Å —É –í–∞—Å –æ—Ç–∫—Ä—ã—Ç —Ç–∏–∫–µ—Ç ‚Ññ{status.ticketData.ticketId}',
                reply_markup=factory.create_close_ticket_button(ticketId)
            )
        else:
            await message.answer(
                f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∞–≥–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏, —É –í–∞—Å —Å–µ–π—á–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤'
            )


@dp.message(MenuState.ticket_open_client)
async def on_client_msg(message: types.Message, state: FSMContext):
    if (message.text.startswith("–û—Ç–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç")):
        return
    status: ticket_bot_pb2.SupportStatus = grpc_calls.get_status(
        user_id=message.from_user.id)

    if status.HasField('ticketData'):
        should_log = grpc_calls.log_user_message(
            ticket_id=status.ticketData.ticketId,
            message_id=message.message_id
        ).value

        if status.ticketData.HasField('agentId'):
            agentId = status.ticketData.agentId
            await message.send_copy(int(agentId))

            if should_log:
                await message.reply('_info: —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ_', parse_mode='Markdown')
    pass


@dp.message(MenuState.ticket_open_agent)
async def on_agent_msg(message: types.Message, state: FSMContext):
    status: ticket_bot_pb2.SupportStatus = grpc_calls.get_status(
        user_id=message.from_user.id)

    if status.HasField('ticketData'):
        clientId = status.ticketData.userId
        await message.send_copy(int(clientId))

        await message.reply('_info: —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ_', parse_mode='Markdown')
        grpc_calls.log_agent_message(status.ticketData.ticketId)


@dp.message(Text(text='–û—Ç–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç üé´'), MenuState.menu)
@dp.callback_query(Text(text_startswith='open_ticket'))
async def open_ticket(message: types.Message, state: FSMContext):
    try:
        open_ticket_response = grpc_calls.open_ticket(message.from_user.id)
        await state.set_state(MenuState.ticket_open_client)

        if open_ticket_response.HasField('agentId'):
            await message.answer(
                f'–í–∞—Å —Å–≤—è–∑–∞–ª–∏ —Å –±–ª–æ–≥–µ—Ä–æ–º.'
            )

            await bot.send_message(
                chat_id=int(open_ticket_response.agentId),
                text=f'–í—ã –Ω–∞–∑–∞—á–µ–Ω—ã –∞–≥–µ–Ω—Ç–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞ —Ç–∏–∫–µ—Ç ‚Ññ{open_ticket_response.ticketId}',
                reply_markup=factory.create_close_ticket_button(
                    open_ticket_response.ticketId)
            )

        else:
            await message.answer(
                f'–í–∞—Å —Å–≤—è–∑–∞–ª–∏ —Å –±–ª–æ–≥–µ—Ä–æ–º.'
            )

    except grpc.RpcError as e:
        err_code = e.args[0].details
        if err_code == 'CALLCENTER_NOT_FOUND':
            await message.answer(
                '–ë–æ—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—ã–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (—Ü–µ–Ω—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω)'
            )
        elif err_code == 'BAD_CHANNEL_ID':
            await message.answer(
                '–ë–æ—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—ã–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (—Ü–µ–Ω—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º—É –∫–∞–Ω–∞–ª—É)'
            )
        elif err_code == 'TICKET_ALREADY_OPENED':
            await message.answer(
                '–í—ã —É–∂–µ –æ—Ç–∫—Ä—ã–ª–∏ —Ç–∏–∫–µ—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –∑–∞–∫—Ä–æ–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏–∫–µ—Ç'
            )
        else:
            await message.answer(
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ'
            )


@dp.callback_query(Text(text_startswith='close_ticket'))
async def close_ticket(callback: types.CallbackQuery, state: FSMContext):
    ticketId = callback.data.split('_')[-1]
    userId = callback.from_user.id
    try:
        closed_ticket: ticket_bot_pb2.TicketData = grpc_calls.close_ticket(
            ticketId)

        await bot.send_message(
            chat_id=userId,
            text='–¢–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç')

        await state.set_state(MenuState.menu)
        await callback.message.delete()

        if closed_ticket.userId == str(userId):
            if closed_ticket.HasField('agentId'):
                await bot.send_message(
                    chat_id=int(closed_ticket.agentId),
                    text=f'–¢–∏–∫–µ—Ç ‚Ññ{closed_ticket.ticketId} –∑–∞–∫—Ä—ã—Ç –∫–ª–∏–µ–Ω—Ç–æ–º')
        else:
            await bot.send_message(
                chat_id=int(closed_ticket.userId),
                text=f'–°–µ—Å—Å–∏—è –∑–∞–∫–æ–Ω—á–µ–Ω–∞, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –æ—Ç–∫—Ä–æ–π—Ç–µ —Ç–∏–∫–µ—Ç –µ—â–µ —Ä–∞–∑.',
                reply_markup=factory.create_open_ticket_button()
            )

    except grpc.RpcError as e:
        await bot.send_message(
            chat_id=callback.from_user.id,
            text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞.' +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞'
        )
        pass


async def main():
    loop = asyncio.get_event_loop()
    loop.create_task(check_available.main(bot=bot))
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())


if __name__ == "__main__":
    asyncio.run(main())
